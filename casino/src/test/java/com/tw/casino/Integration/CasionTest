package com.tw.casion.integration;

import static org.junit.Assert.assertNotSame;
import static org.junit.Assert.assertThat;

import java.util.ArrayList;
import java.util.List;

import javax.net.ssl.SSLException;

import org.hamcrest.core.IsNot;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import static org.hamcrest.CoreMatchers.*;

import com.tw.casino.IPlayer;
import com.tw.casino.actor.Player;
import com.tw.casino.connection.messages.GameListResponse;
import com.tw.casino.connection.messages.Message;
import com.tw.casino.connection.messages.Response;
import com.tw.casino.connection.messages.data.GameDetails;
import com.tw.casino.connection.netty.CasinoClientHandler;
import com.tw.casino.connection.netty.CasinoClientInitializer;
import com.tw.casino.util.Constants;

import io.netty.bootstrap.Bootstrap;
import io.netty.channel.Channel;
import io.netty.channel.EventLoopGroup;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.channel.socket.nio.NioSocketChannel;
import io.netty.handler.logging.LogLevel;
import io.netty.handler.logging.LoggingHandler;
import io.netty.handler.ssl.SslContext;
import io.netty.handler.ssl.SslContextBuilder;
import io.netty.handler.ssl.util.InsecureTrustManagerFactory;

public class CasinoTest {
	static final boolean SSL = System.getProperty("ssl") != null;

	EventLoopGroup group;
	Channel channel;
	String host = "localhost";
	//double startingBalance = 5000;
	int port = 8088;
	CasinoClientHandler handler;
	
	IPlayer player = new Player(5000);
	Message request = null;
	Message response = null;
	String menuMessage = null;

	@Before
	public void connect() throws SSLException {
		final SslContext sslCtx;
		if (SSL){
			sslCtx = SslContextBuilder.forClient()
					.trustManager(InsecureTrustManagerFactory.INSTANCE).build();
		}
		else{
			sslCtx = null;
		}
		group = new NioEventLoopGroup();
		try{
			Bootstrap b = new Bootstrap();
			b.group(group)
			.channel(NioSocketChannel.class)
			.handler(new LoggingHandler(LogLevel.INFO))
			.handler(new CasinoClientInitializer(sslCtx));
			channel = b.connect(host, port).sync().channel();
			handler = channel.pipeline().get(CasinoClientHandler.class);
		}
		catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	@Test
	public void testNameOfGameReturnedFromServer() {
		player.loadPlayerStrategy();
		request = player.createGameListRequest();
		List<GameDetails> gameDetails = new ArrayList<GameDetails>();
		GameListResponse gameListResponse = (GameListResponse) handler.sendRequestAndGetResponse(request);
		gameDetails.addAll(gameListResponse.getAvailableGames());
		
		assertThat(gameDetails.get(0).getName(), is("Rock-Paper-Scissors"));
					
	}
	
	@Test
	public void testPriceOfGameReturnedFromServer() {
		player.loadPlayerStrategy();
		request = player.createGameListRequest();
		List<GameDetails> gameDetails = new ArrayList<GameDetails>();
		GameListResponse gameListResponse = (GameListResponse) handler.sendRequestAndGetResponse(request);
		gameDetails.addAll(gameListResponse.getAvailableGames());
		
		assertThat(gameDetails.get(0).getEntryFee(), is(5.0));
	}
	
	@Test
	public void testWinOrLoseOrAwaitMessage() {
		player.loadPlayerStrategy();
		request = player.createGameListRequest();
		List<GameDetails> gameDetails = new ArrayList<GameDetails>();
		GameListResponse gameListResponse = (GameListResponse) handler.sendRequestAndGetResponse(request);
		gameDetails.addAll(gameListResponse.getAvailableGames());
		menuMessage = player.handleGameListResponse(gameListResponse);
		System.out.println(menuMessage);
		GameDetails details = gameDetails.get(0);
		request = player.createGameRequest(details.getName());
		response = handler.sendRequestAndGetResponse(request);
		menuMessage = player.handleGameResponse((Response) response);
		System.out.println(menuMessage);
		if (menuMessage.equals(Constants.AWAIT)){
			assertThat(menuMessage, is("Waiting for more players to join."));
		}  
		else if(menuMessage.equals(Constants.REGRET)) {
			assertThat(menuMessage, is("Sorry! You didn't win this time."));
		}
		else if(menuMessage.equals(Constants.CONGRATULATIONS)) {
			assertThat(menuMessage, is("Congratulations! You win $10.0"));
		}
		
	}
	
	@Test
	public void testTwoPlayers() {
		player.loadPlayerStrategy();
		
		
		request = player.createGameListRequest();
		List<GameDetails> gameDetails = new ArrayList<GameDetails>();
		GameListResponse gameListResponse = (GameListResponse) handler.sendRequestAndGetResponse(request);
		gameDetails.addAll(gameListResponse.getAvailableGames());
		menuMessage = player.handleGameListResponse(gameListResponse);
		System.out.println(menuMessage);
		GameDetails details = gameDetails.get(0);
		request = player.createGameRequest(details.getName());
		response = handler.sendRequestAndGetResponse(request);
		menuMessage = player.handleGameResponse((Response) response);
		System.out.println(menuMessage);
		if (menuMessage.equals(Constants.AWAIT)){
			assertThat(menuMessage, is("Waiting for more players to join."));
		}  
		else if(menuMessage.equals(Constants.REGRET)) {
			assertThat(menuMessage, is("Sorry! You didn't win this time."));
		}
		else if(menuMessage.equals(Constants.CONGRATULATIONS)) {
			assertThat(menuMessage, is("Congratulations! You win $10.0"));
		}
		
		
		//create player with 10000
		IPlayer player2 = new Player(10000);
		Message request2 = null;
		Message response2 = null;
		String menuMessage2 = null;
		
		request2 = player2.createGameListRequest();
		List<GameDetails> gameDetails2 = new ArrayList<GameDetails>();
		GameListResponse gameListResponse2 = (GameListResponse) handler.sendRequestAndGetResponse(request2);
		gameDetails2.addAll(gameListResponse2.getAvailableGames());
		menuMessage2 = player2.handleGameListResponse(gameListResponse2);
		System.out.println(menuMessage2);
		GameDetails details2 = gameDetails2.get(0);
		request2 = player2.createGameRequest(details2.getName());
		response2 = handler.sendRequestAndGetResponse(request2);
		menuMessage2 = player2.handleGameResponse((Response) response2);
		System.out.println(menuMessage2);
		if (menuMessage2.equals(Constants.AWAIT)){
			assertThat(menuMessage2, is("Waiting for more players to join."));
		}  
		else if(menuMessage2.equals(Constants.REGRET)) {
			assertThat(menuMessage2, is("Sorry! You didn't win this time."));
		}
		else if(menuMessage2.equals(Constants.CONGRATULATIONS)) {
			assertThat(menuMessage2, is("Congratulations! You win $10.0"));
		}
		
		
	}

	@Test
	public void testCheckBalanceFromWinOrLoss() {
		player.loadPlayerStrategy();
		request = player.createGameListRequest();
		List<GameDetails> gameDetails = new ArrayList<GameDetails>();
		GameListResponse gameListResponse = (GameListResponse) handler.sendRequestAndGetResponse(request);
		gameDetails.addAll(gameListResponse.getAvailableGames());
		menuMessage = player.handleGameListResponse(gameListResponse);
		System.out.println(menuMessage);
		GameDetails details = gameDetails.get(0);
		request = player.createGameRequest(details.getName());
		response = handler.sendRequestAndGetResponse(request);
		menuMessage = player.handleGameResponse((Response) response);
		System.out.println(menuMessage);
		if (menuMessage.equals(Constants.AWAIT)){
			assertThat(player.getAccountBalance(), is(4995.0));
		}  
		else if(menuMessage.equals(Constants.REGRET)) {
			assertThat(player.getAccountBalance(), is(4995.0));
		}
		else {
			assertThat(player.getAccountBalance(), is(5005.0));
		}
		System.out.println(player.getAccountBalance());
	}
	
	//TODO: Implement wrong output from dealer server
	@Test
	public void testCheckWrongBalanceFromWinOrLoss() {
		player.loadPlayerStrategy();
		request = player.createGameListRequest();
		List<GameDetails> gameDetails = new ArrayList<GameDetails>();
		GameListResponse gameListResponse = (GameListResponse) handler.sendRequestAndGetResponse(request);
		gameDetails.addAll(gameListResponse.getAvailableGames());
		menuMessage = player.handleGameListResponse(gameListResponse);
		System.out.println(menuMessage);
		GameDetails details = gameDetails.get(0);
		request = player.createGameRequest(details.getName());
		response = handler.sendRequestAndGetResponse(request);
		menuMessage = player.handleGameResponse((Response) response);
		System.out.println(menuMessage);
		if (menuMessage.equals(Constants.AWAIT)){
			assertNotSame(player.getAccountBalance(), is(4995.0));
		}  
		else if(menuMessage.equals(Constants.REGRET)) {
			assertNotSame(player.getAccountBalance(), is(4995.0));
		}
		else {
			assertNotSame(player.getAccountBalance(), is(5005.0));
		}
		System.out.println(player.getAccountBalance());
	}	
	
	
	@After
	public void  shutdown() {
		channel.close();
		group.shutdownGracefully();
	}
}
