package com.tw.casion.integration;

import static org.junit.Assert.assertThat;

import java.util.ArrayList;
import java.util.List;

import javax.net.ssl.SSLException;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import static org.hamcrest.CoreMatchers.*;

import com.tw.casino.IPlayer;
import com.tw.casino.actor.Player;
import com.tw.casino.connection.messages.GameListResponse;
import com.tw.casino.connection.messages.Message;
import com.tw.casino.connection.messages.Response;
import com.tw.casino.connection.messages.data.GameDetails;
import com.tw.casino.connection.netty.CasinoClientHandler;
import com.tw.casino.connection.netty.CasinoClientInitializer;
import com.tw.casino.util.Constants;

import io.netty.bootstrap.Bootstrap;
import io.netty.channel.Channel;
import io.netty.channel.EventLoopGroup;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.channel.socket.nio.NioSocketChannel;
import io.netty.handler.logging.LogLevel;
import io.netty.handler.logging.LoggingHandler;
import io.netty.handler.ssl.SslContext;
import io.netty.handler.ssl.SslContextBuilder;
import io.netty.handler.ssl.util.InsecureTrustManagerFactory;

public class CasinoTest {
	static final boolean SSL = System.getProperty("ssl") != null;

	EventLoopGroup group;
	Channel channel;
	String host = "localhost";
	double startingBalance = 5000;
	int port = 8088;
	CasinoClientHandler handler;

	@Before
	public void connect() throws SSLException {
		final SslContext sslCtx;
		if (SSL){
			sslCtx = SslContextBuilder.forClient()
					.trustManager(InsecureTrustManagerFactory.INSTANCE).build();
		}
		else{
			sslCtx = null;
		}
		group = new NioEventLoopGroup();
		try{
			Bootstrap b = new Bootstrap();
			b.group(group)
			.channel(NioSocketChannel.class)
			.handler(new LoggingHandler(LogLevel.INFO))
			.handler(new CasinoClientInitializer(sslCtx));
			channel = b.connect(host, port).sync().channel();
			handler = channel.pipeline().get(CasinoClientHandler.class);
		}
		catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	@Test
	public void testNameOfGameReturnedFromServer() {
		Message request = null;
		IPlayer player;
		player = new Player(startingBalance);
		player.loadPlayerStrategy();
		request = player.createGameListRequest();
		List<GameDetails> gameDetails = new ArrayList<GameDetails>();
		GameListResponse gameListResponse = (GameListResponse) handler.sendRequestAndGetResponse(request);
		gameDetails.addAll(gameListResponse.getAvailableGames());
		
		assertThat(gameDetails.get(0).getName(), is("Rock-Paper-Scissors"));
					
	}
	
	@Test
	public void testPriceOfGameReturnedFromServer() {
		Message request = null;
		IPlayer player;
		player = new Player(startingBalance);
		player.loadPlayerStrategy();
		request = player.createGameListRequest();
		List<GameDetails> gameDetails = new ArrayList<GameDetails>();
		GameListResponse gameListResponse = (GameListResponse) handler.sendRequestAndGetResponse(request);
		gameDetails.addAll(gameListResponse.getAvailableGames());
		
		assertThat(gameDetails.get(0).getEntryFee(), is(5.0));
	}
	
	@Test
	public void testWinOrLoseOrAwaitMessage() {
		IPlayer player;
		player = new Player(startingBalance);
		player.loadPlayerStrategy();
		Message request = null;
		Message response = null;
		String menuMessage = null;
		request = player.createGameListRequest();
		List<GameDetails> gameDetails = new ArrayList<GameDetails>();
		GameListResponse gameListResponse = (GameListResponse) handler.sendRequestAndGetResponse(request);
		gameDetails.addAll(gameListResponse.getAvailableGames());
		menuMessage = player.handleGameListResponse(gameListResponse);
		System.out.println(menuMessage);
		GameDetails details = gameDetails.get(0);
		request = player.createGameRequest(details.getName());
		response = handler.sendRequestAndGetResponse(request);
		menuMessage = player.handleGameResponse((Response) response);
		System.out.println(menuMessage);
		if (menuMessage.equals(Constants.AWAIT))
		{
			assertThat(menuMessage, is("Waiting for more players to join."));
		}  
		else if(menuMessage.equals(Constants.REGRET)) {
			assertThat(menuMessage, is("Sorry! You didn't win this time."));
		}
		else if(menuMessage.equals(Constants.CONGRATULATIONS)) {
			assertThat(menuMessage, is("Congratulations! You win $10"));
		}
		
	}
	

	@After
	public void  shutdown() {
		channel.close();
		group.shutdownGracefully();
	}
}
